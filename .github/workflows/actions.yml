on:
  push:
#     branches:
#       - master

name: Deploy to AWS Cloudformation

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Install AWS SAM
      run: |
        pip3 install --upgrade --user setuptools && pip3 install wheel --user && pip3 install aws-sam-cli --user  #sudo apt-get install aws-sam-cli
        sudo apt install find
        find . -name sam
        # export PATH=$PATH:/home/runner/.local/lib/python3.6/site-packages
        # sam --version
        # pip3 install --user --upgrade setuptools && pip3 install --user wheel && pip3 install --user aws-sam-cli  #sudo apt-get install aws-sam-cli
#    - name: Install AWS SAM
#      run: |
#        brew --version
#        brew tap aws/tap
#        brew install aws-sam-cli
#        sam --version

    - name: Check if AWS SAM is installed
      run: sam --version

    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.aws_access_key }}
        aws-secret-access-key: ${{ secrets.aws_secret_key }}
        aws-region: eu-central-1

    - name: Validate templae
      run: aws cloudformation validate-template --template-body file://terminate-ec2-instances/template.yaml
    
    - name: Deploy
      env: 
        TAG: ${{ github.sha }}
      run: |
        # aws cloudformation deploy --template-file ./terminate-ec2-instances/template.yaml --capabilities CAPABILITY_NAMED_IAM --stack-name my-stack
        # aws cloudformation deploy --template-file ./terminate-ec2-instances/template.yaml --capabilities CAPABILITY_NAMED_IAM --stack-name stack-$TAG
        # aws cloudformation deploy --template-file /path_to_template/template.json --stack-name my-new-stack --parameter-overrides Key1=Value1 Key2=Value2 --tags Key1=Value1 Key2=Value2      
#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push image to Amazon ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: my-ecr-repo
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         # Build a docker container and
#         # push it to ECR so that it can
#         # be deployed to ECS.
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#     - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: task-definition.json
#         container-name: sample-app
#         image: ${{ steps.build-image.outputs.image }}

#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: sample-app-service
#         cluster: default
#         wait-for-service-stability: true
